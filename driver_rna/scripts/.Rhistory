cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = FALSE,
scale = "row",
color =colorRampPalette(c("navy", "white", "firebrick3"))(50),
use_raster = TRUE,
annotation_col = ann_col_info,
annotation_colors = anno_info_colors,
main = "DGE Macula lutea vs Peripheral retina, RPCs ")
plot1
pheatmap(rna_1,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = FALSE,
scale = "row",
color =colorRampPalette(c("navy", "white", "firebrick3"))(50),
use_raster = TRUE,
annotation_col = ann_col_info,
annotation_colors = anno_info_colors,
main = "DGE Macula lutea vs Peripheral retina, RPCs ")
Heatmap(rna_1, name = "Expression",
column_title = "DGE Macula lutea vs Peripheral retina, RPCs")
remove.packages("ComplexHeatmap")
### Heatmap of the most significant genes ###
BiocManager::install("ComplexHeatmap")
.rs.restartR()
library("ComplexHeatmap")
pheatmap(rna_1,
cluster_rows = FALSE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = FALSE,
scale = "row",
color =colorRampPalette(c("navy", "white", "firebrick3"))(50),
use_raster = TRUE,
annotation_col = ann_col_info,
annotation_colors = anno_info_colors,
main = "DGE Macula lutea vs Peripheral retina, RPCs ")
pheatmap(rna_1,
cluster_rows = TRUE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = FALSE,
scale = "row",
color =colorRampPalette(c("navy", "white", "firebrick3"))(50),
use_raster = TRUE,
annotation_col = ann_col_info,
annotation_colors = anno_info_colors,
main = "DGE Macula lutea vs Peripheral retina, RPCs ")
install.packages("magick")
pheatmap(rna_1,
cluster_rows = TRUE,
cluster_cols = FALSE,
show_rownames = TRUE,
show_colnames = FALSE,
scale = "row",
color =colorRampPalette(c("navy", "white", "firebrick3"))(50),
use_raster = TRUE,
annotation_col = ann_col_info,
annotation_colors = anno_info_colors,
main = "DGE Macula lutea vs Peripheral retina, RPCs ")
editor_options:
chunk_output_type: console
options(bitmapType='cairo')
#saving plot cluster
options(bitmapType='cairo')
png(file="heatmap1.png", width = 600, height = 600)
capabilities()
Cairo::CairoPDF()
install.packages("Cairo")
Cairo::CairoPDF()
library(Cairo)
library(Cairo)
remove.packages("Cairo")
install.packages("Cairo", repo="https://RForge.net")
install.packages("Cairo")
library("Cairo")
plot1 <- readRDS("~/Documents/PhD_AI/sc_devil/plot1.rds")
plot1
View(plot1)
ulimit -s
R --slave -e 'Cstack_info()["size"]'
ulimit -s 16384
pdf('heatmap.pdf', width=6, height=6)
plot1
library("Cairo")
capabilities()
library(Cairo)
remove.packages("Cairo")
load("~/Documents/PhD_AI/sc_devil/data/metadata.Rdata")
load("~/Documents/PhD_AI/sc_devil/data/metadata.Rdata")
View(metadata)
View(metadata)
# Tissue specific filtering
metadata_filtered <- metadata %>%
filter(donor_id %in% c("Donor_1", "Donor_2", "Donor_3", "Donor_4", "Donor_5", "Donor_6", "Donor_7", "Donor_8"),
tissue %in% c("macula lutea", "peripheral region of retina"),
sequencing_platform %in% c("Illumina NovaSeq 6000"))
library(tidyverse)
#Differentiated vs non diff. neurons
metadata_filtered <- metadata %>%
filter(donor_id %in% c("Donor_1", "Donor_2", "Donor_3", "Donor_4", "Donor_5", "Donor_6", "Donor_7", "Donor_8",
"Donor_9", "Donor_10", "Donor_11", "Donor_12"),
cell_type %in% c("retinal progenitor cell", "Mueller cell", "amacrine cell", "retinal rod cell", "diffuse bipolar 1 cell",
"GABAergic amacrine cell", "retinal bipolar neuron", "retinal cone cell"),
sequencing_platform %in% c("Illumina NovaSeq 6000"))
heatmap1 <- readRDS("~/Documents/PhD_AI/sc_devil/heatmap1.rds")
hetamap1
heatmap1
BiocManager::install("dittoSeq")
#BiocManager::install("dittoSeq")
library(dittoSeq)
gene_list1 <- c("FGF19", "CYP1B1", "CYP26A1", "DIO2", "CDKN1A", "ANXA2", "FRZB", "CRYAB", "HES1", "PTGDS",
"GPX3", "APOE", "FOXG1", "TBX20")
load("~/Documents/PhD_AI/sc_devil/data/metadata.Rdata")
View(metadata)
#Data filtering for donor ID and cell type
metadata_filtered <- metadata %>%
filter(donor_id %in% c("Donor_1", "Donor_2", "Donor_3", "Donor_4", "Donor_5", "Donor_6", "Donor_7", "Donor_8"),
tissue %in% c("macula lutea", "peripheral region of retina"),
sequencing_platform %in% c("Illumina NovaSeq 6000"))
View(metadata_filtered)
#Data filtering for donor ID and cell type
metadata_filtered <- metadata %>%
filter(donor_id %in% c("Donor_1", "Donor_2", "Donor_3", "Donor_4", "Donor_5", "Donor_6", "Donor_7", "Donor_8"),
tissue %in% c("macula lutea", "peripheral region of retina"),
sequencing_platform %in% c("Illumina NovaSeq 6000"))
metadata2 <- subset(metadata_filtered,
metadata_filtered$nFeatures_RNA >= 1000 & metadata_filtered$nFeatures_RNA <= 8000)
View(metadata2)
View(metadata2)
heatmap1 <- Seurat::DoHeatmap(subset(seurat, downsample = 10000),
features = gene_list1,
group.by = "tissue",
size = 3)
#loading libraries
#BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
library(tidyverse)
library(SummarizedExperiment)
#Get a list of projects
gdcprojects = getGDCprojects()
getProjectSummary('TCGA-OV')
output_query_TCGA <- getResults(query_TCGA_cnv)
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-OV',
data.category = 'Copy Number Variation',
#sample.type = "Primary Tumor",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
View(query_TCGA_cnv)
View(query_TCGA_cnv[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-OV',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Normal gene expression data
query_TCGA_rna_normal <- GDCquery(project = 'TCGA-OV',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
sample.type = "Solid Tissue Normal",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-OV',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-LUAD',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-OV',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-OV',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-AML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TARGET-AML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TARGET-AML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TARGET-UCS',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TTCGA-UCS',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-UCS',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-GBM',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-NBL',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-DLBC',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-LIHC',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-LAML ',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-LAML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
#sample.type = "Primary Tumor",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
View(query_TCGA_cnv)
View(query_TCGA_cnv[[1]][[1]])
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
sample.type = "Primary Tumor",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
#sample.type = "Primary Tumor",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
View(query_TCGA_cnv)
View(query_TCGA_cnv[[1]][[1]])
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
sample.type = "Primary Blood Derived Cancer - Peripheral Blood",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
#sample.type = "Primary Blood Derived Cancer - Peripheral Blood",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
View(query_TCGA_cnv)
View(query_TCGA_cnv[[1]][[1]])
View(query_TCGA_cnv[[1]][[1]])
output_query_TCGA <- getResults(query_TCGA_cnv)
View(output_query_TCGA)
#barcode = luad_rna_normal)
#download data
GDCdownload(query_TCGA_cnv)
#prepare data
laml_cnv <- GDCprepare(query_TCGA_cnv, summarizedExperiment = TRUE)
laml_cnv <- assay(laml_cnv, 'copy_number', rownames = TRUE)
View(laml_cnv)
laml_cnv <- na.omit(laml_cnv)
View(laml_cnv)
View(laml_cnv)
#prepare data
laml_cnv <- GDCprepare(query_TCGA_cnv, summarizedExperiment = TRUE)
View(laml_cnv)
View(laml_cnv)
laml_cnv_tumor <- assay(laml_cnv, 'copy_number', rownames = TRUE)
gene_name <- as.data.frame(laml_cnv@rowRanges@elementMetadata@listData[["gene_name"]])
View(gene_name)
colnames(gene_name)[1] <- "GeneID"
laml_cnv_tumor <- as.data.frame(laml_cnv_tumor)
luad_rna_norm <- cbind(gene_name, laml_cnv_tumor)
laml_cnv_tumor <- cbind(gene_name, laml_cnv_tumor)
laml_cnv_tumor <- laml_cnv_tumor[!duplicated(laml_cnv_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_cnv_tumor <- na.omit(laml_cnv_tumor)
View(laml_cnv_tumor)
View(query_TCGA_cnv)
View(query_TCGA_cnv[[1]][[1]])
#substring columns
colnames(laml_cnv_tumor) <- substr(colnames(laml_cnv_tumor), 1, 12)
View(laml_cnv_tumor)
save(laml_cnv_tumor, file = '~/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = 'Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '/Users/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '~/Users/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '/Users/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = 'Users/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '~/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '~/Documents/PhD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 10)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 12)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 14)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 14)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 15)
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-LAML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#barcode = luad_rna_normal)
#download data
GDCdownload(query_TCGA_rna)
luad_rna <- GDCprepare(query_TCGA_rna, summarizedExperiment = TRUE)
laml_rna <- GDCprepare(query_TCGA_rna, summarizedExperiment = TRUE)
laml_rna_tumor <- assay(laml_rna, 'unstranded', rownames = TRUE)
gene_name <- as.data.frame(laml_rna@rowRanges@elementMetadata@listData[["gene_name"]])
colnames(gene_name)[1] <- "GeneID"
laml_rna_tumor <- as.data.frame(laml_rna_tumor)
laml_rna_tumor <- cbind(gene_name, laml_rna_tumor)
laml_rna_tumor <- laml_rna_tumor[!duplicated(laml_rna_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_rna_tumor <- na.omit(laml_rna_tumor)
View(laml_rna_tumor)
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#substring columns
colnames(laml_rna_tumor) <- substr(colnames(laml_rna_tumor), 1, 12)
View(laml_rna_tumor)
laml_cnv_tumor <- laml_cnv_tumor[(colnames(laml_cnv_tumor) %in% colnames(laml_rna_tumor)),]
laml_rna_tumor <- laml_rna_tumor[(colnames(laml_rna_tumor) %in% colnames(laml_cnv_tumor)),]
laml_cnv_tumor <- assay(laml_cnv, 'copy_number', rownames = TRUE)
gene_name <- as.data.frame(laml_cnv@rowRanges@elementMetadata@listData[["gene_name"]])
colnames(gene_name)[1] <- "GeneID"
laml_cnv_tumor <- as.data.frame(laml_cnv_tumor)
laml_cnv_tumor <- cbind(gene_name, laml_cnv_tumor)
laml_cnv_tumor <- laml_cnv_tumor[!duplicated(laml_cnv_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_cnv_tumor <- na.omit(laml_cnv_tumor)
#substring columns
colnames(laml_cnv_tumor) <- substr(colnames(laml_cnv_tumor), 1, 12)
View(laml_rna_tumor)
laml_rna_tumor <- laml_rna_tumor[,(colnames(laml_rna_tumor) %in% colnames(laml_cnv_tumor))]
laml_cnv_tumor <- laml_cnv_tumor[,(colnames(laml_cnv_tumor) %in% colnames(laml_rna_tumor))]
#Filtering low counts genes
laml_rna_tumor <- laml_rna_tumor[which(rowSums(laml_rna_tumor)>100),]
#Filtering low counts genes
laml_rna_tumor <- laml_rna_tumor[which(rowSums(laml_rna_tumor)>200),]
#Filtering low counts genes
laml_rna_tumor <- laml_rna_tumor[which(rowSums(laml_rna_tumor)>300),]
View(laml_rna_tumor)
laml_cnv_tumor <- laml_cnv_tumor[(rownames(laml_cnv_tumor) %in% rownames(laml_rna_tumor)),] #delete rows by nam
laml_rna_tumor <- laml_rna_tumor[(rownames(laml_rna_tumor) %in% rownames(laml_cnv_tumor)),] #delete rows by nam
save(laml_cnv_tumor, file = '~/Documents/PhD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 15)
laml_cnv_tumor <- assay(laml_cnv, 'copy_number', rownames = TRUE)
laml_rna_tumor <- assay(laml_rna, 'unstranded', rownames = TRUE)
gene_name <- as.data.frame(laml_cnv@rowRanges@elementMetadata@listData[["gene_name"]])
colnames(gene_name)[1] <- "GeneID"
laml_cnv_tumor <- as.data.frame(laml_cnv_tumor)
laml_cnv_tumor <- cbind(gene_name, laml_cnv_tumor)
laml_cnv_tumor <- laml_cnv_tumor[!duplicated(laml_cnv_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_cnv_tumor <- na.omit(laml_cnv_tumor)
#substring columns
colnames(laml_cnv_tumor) <- substr(colnames(laml_cnv_tumor), 1, 12)
laml_rna_tumor <- assay(laml_rna, 'unstranded', rownames = TRUE)
gene_name <- as.data.frame(laml_rna@rowRanges@elementMetadata@listData[["gene_name"]])
colnames(gene_name)[1] <- "GeneID"
laml_rna_tumor <- as.data.frame(laml_rna_tumor)
laml_rna_tumor <- cbind(gene_name, laml_rna_tumor)
laml_rna_tumor <- laml_rna_tumor[!duplicated(laml_rna_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_rna_tumor <- na.omit(laml_rna_tumor)
#substring columns
colnames(laml_rna_tumor) <- substr(colnames(laml_rna_tumor), 1, 12)
laml_cnv_tumor <- laml_cnv_tumor[,(colnames(laml_cnv_tumor) %in% colnames(laml_rna_tumor))]
laml_rna_tumor <- laml_rna_tumor[,(colnames(laml_rna_tumor) %in% colnames(laml_cnv_tumor))]
#Filtering low counts genes
laml_rna_tumor <- laml_rna_tumor[which(rowSums(laml_rna_tumor)>100),]
laml_rna_tumor <- laml_rna_tumor[(rownames(laml_rna_tumor) %in% rownames(laml_cnv_tumor)),] #delete rows by nam
laml_cnv_tumor <- laml_cnv_tumor[(rownames(laml_cnv_tumor) %in% rownames(laml_rna_tumor)),] #delete rows by nam
save(laml_cnv_tumor, file = '~/Documents/PhD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 15)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 12)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 15)
