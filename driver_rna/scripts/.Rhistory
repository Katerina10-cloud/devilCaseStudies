query_TCGA_rna <- GDCquery(project = 'TCGA-OV',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-AML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TARGET-AML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TARGET-AML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TARGET-UCS',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TTCGA-UCS',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-UCS',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-GBM',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-NBL',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-DLBC',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-LIHC',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-LAML ',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-LAML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
#sample.type = "Primary Tumor",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
View(query_TCGA_cnv)
View(query_TCGA_cnv[[1]][[1]])
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
sample.type = "Primary Tumor",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
#sample.type = "Primary Tumor",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
View(query_TCGA_cnv)
View(query_TCGA_cnv[[1]][[1]])
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
sample.type = "Primary Blood Derived Cancer - Peripheral Blood",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
##build a query to retrieve data
query_TCGA_cnv <- GDCquery(project = 'TCGA-LAML',
data.category = 'Copy Number Variation',
#sample.type = "Primary Blood Derived Cancer - Peripheral Blood",
data.type = "Gene Level Copy Number",
workflow.type = 'ASCAT3')
View(query_TCGA_cnv)
View(query_TCGA_cnv[[1]][[1]])
View(query_TCGA_cnv[[1]][[1]])
output_query_TCGA <- getResults(query_TCGA_cnv)
View(output_query_TCGA)
#barcode = luad_rna_normal)
#download data
GDCdownload(query_TCGA_cnv)
#prepare data
laml_cnv <- GDCprepare(query_TCGA_cnv, summarizedExperiment = TRUE)
laml_cnv <- assay(laml_cnv, 'copy_number', rownames = TRUE)
View(laml_cnv)
laml_cnv <- na.omit(laml_cnv)
View(laml_cnv)
View(laml_cnv)
#prepare data
laml_cnv <- GDCprepare(query_TCGA_cnv, summarizedExperiment = TRUE)
View(laml_cnv)
View(laml_cnv)
laml_cnv_tumor <- assay(laml_cnv, 'copy_number', rownames = TRUE)
gene_name <- as.data.frame(laml_cnv@rowRanges@elementMetadata@listData[["gene_name"]])
View(gene_name)
colnames(gene_name)[1] <- "GeneID"
laml_cnv_tumor <- as.data.frame(laml_cnv_tumor)
luad_rna_norm <- cbind(gene_name, laml_cnv_tumor)
laml_cnv_tumor <- cbind(gene_name, laml_cnv_tumor)
laml_cnv_tumor <- laml_cnv_tumor[!duplicated(laml_cnv_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_cnv_tumor <- na.omit(laml_cnv_tumor)
View(laml_cnv_tumor)
View(query_TCGA_cnv)
View(query_TCGA_cnv[[1]][[1]])
#substring columns
colnames(laml_cnv_tumor) <- substr(colnames(laml_cnv_tumor), 1, 12)
View(laml_cnv_tumor)
save(laml_cnv_tumor, file = '~/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = 'Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '/Users/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '~/Users/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '/Users/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = 'Users/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '~/Documents/PnD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
save(laml_cnv_tumor, file = '~/Documents/PhD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 10)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 12)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 14)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 14)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 15)
#build a query to retrieve Tumor gene expression data
query_TCGA_rna <- GDCquery(project = 'TCGA-LAML',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
data.type = "Gene Expression Quantification",
#sample.type = "Primary Tumor",
access = 'open')
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#barcode = luad_rna_normal)
#download data
GDCdownload(query_TCGA_rna)
luad_rna <- GDCprepare(query_TCGA_rna, summarizedExperiment = TRUE)
laml_rna <- GDCprepare(query_TCGA_rna, summarizedExperiment = TRUE)
laml_rna_tumor <- assay(laml_rna, 'unstranded', rownames = TRUE)
gene_name <- as.data.frame(laml_rna@rowRanges@elementMetadata@listData[["gene_name"]])
colnames(gene_name)[1] <- "GeneID"
laml_rna_tumor <- as.data.frame(laml_rna_tumor)
laml_rna_tumor <- cbind(gene_name, laml_rna_tumor)
laml_rna_tumor <- laml_rna_tumor[!duplicated(laml_rna_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_rna_tumor <- na.omit(laml_rna_tumor)
View(laml_rna_tumor)
View(query_TCGA_rna)
View(query_TCGA_rna[[1]][[1]])
#substring columns
colnames(laml_rna_tumor) <- substr(colnames(laml_rna_tumor), 1, 12)
View(laml_rna_tumor)
laml_cnv_tumor <- laml_cnv_tumor[(colnames(laml_cnv_tumor) %in% colnames(laml_rna_tumor)),]
laml_rna_tumor <- laml_rna_tumor[(colnames(laml_rna_tumor) %in% colnames(laml_cnv_tumor)),]
laml_cnv_tumor <- assay(laml_cnv, 'copy_number', rownames = TRUE)
gene_name <- as.data.frame(laml_cnv@rowRanges@elementMetadata@listData[["gene_name"]])
colnames(gene_name)[1] <- "GeneID"
laml_cnv_tumor <- as.data.frame(laml_cnv_tumor)
laml_cnv_tumor <- cbind(gene_name, laml_cnv_tumor)
laml_cnv_tumor <- laml_cnv_tumor[!duplicated(laml_cnv_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_cnv_tumor <- na.omit(laml_cnv_tumor)
#substring columns
colnames(laml_cnv_tumor) <- substr(colnames(laml_cnv_tumor), 1, 12)
View(laml_rna_tumor)
laml_rna_tumor <- laml_rna_tumor[,(colnames(laml_rna_tumor) %in% colnames(laml_cnv_tumor))]
laml_cnv_tumor <- laml_cnv_tumor[,(colnames(laml_cnv_tumor) %in% colnames(laml_rna_tumor))]
#Filtering low counts genes
laml_rna_tumor <- laml_rna_tumor[which(rowSums(laml_rna_tumor)>100),]
#Filtering low counts genes
laml_rna_tumor <- laml_rna_tumor[which(rowSums(laml_rna_tumor)>200),]
#Filtering low counts genes
laml_rna_tumor <- laml_rna_tumor[which(rowSums(laml_rna_tumor)>300),]
View(laml_rna_tumor)
laml_cnv_tumor <- laml_cnv_tumor[(rownames(laml_cnv_tumor) %in% rownames(laml_rna_tumor)),] #delete rows by nam
laml_rna_tumor <- laml_rna_tumor[(rownames(laml_rna_tumor) %in% rownames(laml_cnv_tumor)),] #delete rows by nam
save(laml_cnv_tumor, file = '~/Documents/PhD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 15)
laml_cnv_tumor <- assay(laml_cnv, 'copy_number', rownames = TRUE)
laml_rna_tumor <- assay(laml_rna, 'unstranded', rownames = TRUE)
gene_name <- as.data.frame(laml_cnv@rowRanges@elementMetadata@listData[["gene_name"]])
colnames(gene_name)[1] <- "GeneID"
laml_cnv_tumor <- as.data.frame(laml_cnv_tumor)
laml_cnv_tumor <- cbind(gene_name, laml_cnv_tumor)
laml_cnv_tumor <- laml_cnv_tumor[!duplicated(laml_cnv_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_cnv_tumor <- na.omit(laml_cnv_tumor)
#substring columns
colnames(laml_cnv_tumor) <- substr(colnames(laml_cnv_tumor), 1, 12)
laml_rna_tumor <- assay(laml_rna, 'unstranded', rownames = TRUE)
gene_name <- as.data.frame(laml_rna@rowRanges@elementMetadata@listData[["gene_name"]])
colnames(gene_name)[1] <- "GeneID"
laml_rna_tumor <- as.data.frame(laml_rna_tumor)
laml_rna_tumor <- cbind(gene_name, laml_rna_tumor)
laml_rna_tumor <- laml_rna_tumor[!duplicated(laml_rna_tumor$GeneID), ] %>% remove_rownames %>% column_to_rownames(var="GeneID")
laml_rna_tumor <- na.omit(laml_rna_tumor)
#substring columns
colnames(laml_rna_tumor) <- substr(colnames(laml_rna_tumor), 1, 12)
laml_cnv_tumor <- laml_cnv_tumor[,(colnames(laml_cnv_tumor) %in% colnames(laml_rna_tumor))]
laml_rna_tumor <- laml_rna_tumor[,(colnames(laml_rna_tumor) %in% colnames(laml_cnv_tumor))]
#Filtering low counts genes
laml_rna_tumor <- laml_rna_tumor[which(rowSums(laml_rna_tumor)>100),]
laml_rna_tumor <- laml_rna_tumor[(rownames(laml_rna_tumor) %in% rownames(laml_cnv_tumor)),] #delete rows by nam
laml_cnv_tumor <- laml_cnv_tumor[(rownames(laml_cnv_tumor) %in% rownames(laml_rna_tumor)),] #delete rows by nam
save(laml_cnv_tumor, file = '~/Documents/PhD_AI/TCGA/aml_cancer/laml_cnv_tumor.Rdata')
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 15)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 12)
hist(rowMeans(laml_cnv_tumor),
main = "AML CNV",
xlab = "CN state",
breaks = 15)
load("~/Documents/PhD_AI/sc_devil/metadata_retina.Rdata")
View(metadata)
metadata_filtered <- metadata[ !(metadata$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2")), ]
View(metadata_filtered)
metadata_filtered <- metadata[ !(metadata$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2", "H4")), ]
metadata_filtered <- metadata[ !(metadata$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2", "H4", "H1", "H9")), ]
metadata_filtered <- metadata[ !(metadata$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2", "H4", "H1", "H9", "R-00646_03")), ]
metadata_filtered <- metadata[ !(metadata$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2")) & sequencing_platform %in% c("unknown")) , ]
metadata_filtered <- metadata[ !(metadata$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2")) & sequencing_platform %in% c("unknown") , ]
metadata_filtered <- metadata[ !(metadata$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2")) & metadata$sequencing_platform %in% c("unknown") , ]
metadata_filtered <- metadata[ !(metadata$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2")) | metadata$sequencing_platform %in% c("unknown") , ]
"donor3-scheetz", "sanes-Pt2")) | (metadata$sequencing_platform %in% c("unknown") , ]
metadata_filtered <- metadata[ !(metadata$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2")) | (metadata$sequencing_platform %in% c("unknown")) , ]
metadata_filtered <- metadata %>%
filter(sequencing_platform %in% c("unknown"))
#install.packages("Seurat")
library(tidyverse)
metadata_filtered <- metadata %>%
filter(sequencing_platform %in% c("unknown"))
metadata_filtered <- metadata_filtered[ !(metadata_filtered$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2")) , ]
metadata_filtered <- metadata_filtered[ !(metadata_filtered$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2")), ]
View(metadata_filtered)
metadata_filtered <- metadata %>%
filter(sequencing_platform %in% c("unknown"))
metadata_filtered <- metadata_filtered[ !(metadata_filtered$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2")), ]
metadata_filtered <- metadata_filtered[ !(metadata_filtered$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2", "H1", "H9")), ]
metadata_filtered <- metadata_filtered[ !(metadata_filtered$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor3-hafler",
"donor3-scheetz", "sanes-Pt2", "H1", "H9", "R-00646_03")), ]
View(metadata_filtered)
View(metadata_filtered)
metadata_filtered <- metadata %>%
filter(sequencing_platform %in% c("unknown"))
metadata_filtered <- metadata_filtered[ !(metadata_filtered$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor2-hafler", "donor3-hafler",
"donor3-scheetz", "sanes_Pt2", "H1", "H9", "R-00646_03")), ]
metadata_filtered <- metadata %>%
filter(sequencing_platform %in% c("unknown"))
metadata_filtered <- metadata_filtered[ !(metadata_filtered$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor2-hafler", "donor3-hafler",
"donor3-scheetz", "sanes_Pt2", "H1", "H9", "R-00646_03")), ]
metadata_filtered <- metadata_filtered %>%
mutate(cluster = case_when(
cell_type == "GABAergic amacrine cell"  ~ '0',
cell_type == "H1 horizontal cell"  ~ '1',
cell_type == "H2 horizontal cell"  ~ '2',
cell_type == "Mueller cell"  ~ '3',
cell_type == "S cone cell" ~ '4',
cell_type == "amacrine cell" ~ '5',
cell_type == "astrocyte" ~ '6',
cell_type == "glycinergic amacrine cell" ~ '7',
cell_type == "microglial cell" ~ '8',
cell_type == "midget ganglion cell of retina" ~ '9',
cell_type == "parasol ganglion cell of retina" ~ '10',
cell_type == "retinal bipolar neuron" ~ '11',
cell_type == "retinal cone cell" ~ '12',
cell_type == "retinal ganglion cell" ~ '13',
cell_type == "retinal pigment epithelial cell" ~ '14',
cell_type == "retinal rod cell" ~ '15',
cell_type == "retinal bipolar cell" ~ '16',
cell_type == "starburst amacrine cell" ~ '17'
))
metadata_filtered <- metadata_filtered$cluster %>% as.tibble() %>% mutate_if(is.character, as.numeric)
View(metadata_filtered)
metadata_filtered <- metadata %>%
filter(sequencing_platform %in% c("unknown"))
metadata_filtered <- metadata_filtered[ !(metadata_filtered$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor2-hafler", "donor3-hafler",
"donor3-scheetz", "sanes_Pt2", "H1", "H9", "R-00646_03")), ]
metadata_filtered <- metadata_filtered %>%
mutate(cluster = case_when(
cell_type == "GABAergic amacrine cell"  ~ '0',
cell_type == "H1 horizontal cell"  ~ '1',
cell_type == "H2 horizontal cell"  ~ '2',
cell_type == "Mueller cell"  ~ '3',
cell_type == "S cone cell" ~ '4',
cell_type == "amacrine cell" ~ '5',
cell_type == "astrocyte" ~ '6',
cell_type == "glycinergic amacrine cell" ~ '7',
cell_type == "microglial cell" ~ '8',
cell_type == "midget ganglion cell of retina" ~ '9',
cell_type == "parasol ganglion cell of retina" ~ '10',
cell_type == "retinal bipolar neuron" ~ '11',
cell_type == "retinal cone cell" ~ '12',
cell_type == "retinal ganglion cell" ~ '13',
cell_type == "retinal pigment epithelial cell" ~ '14',
cell_type == "retinal rod cell" ~ '15',
cell_type == "retinal bipolar cell" ~ '16',
cell_type == "starburst amacrine cell" ~ '17'
))
metadata_filtered <- metadata_filtered %>% as.tibble() %>% mutate_if(is.character, as.numeric)
View(metadata_filtered)
View(metadata_filtered)
View(metadata)
metadata_filtered <- metadata %>%
filter(sequencing_platform %in% c("unknown"))
metadata_filtered <- metadata_filtered[ !(metadata_filtered$donor_id %in% c("17-010", "17-011", "Hu11", "SC",
"donor1-hafler", "donor1-scheetz", "donor2-scheetz", "donor2-hafler", "donor3-hafler",
"donor3-scheetz", "sanes_Pt2", "H1", "H9", "R-00646_03")), ]
metadata_filtered <- metadata_filtered %>%
mutate(cluster = case_when(
cell_type == "GABAergic amacrine cell"  ~ '0',
cell_type == "H1 horizontal cell"  ~ '1',
cell_type == "H2 horizontal cell"  ~ '2',
cell_type == "Mueller cell"  ~ '3',
cell_type == "S cone cell" ~ '4',
cell_type == "amacrine cell" ~ '5',
cell_type == "astrocyte" ~ '6',
cell_type == "glycinergic amacrine cell" ~ '7',
cell_type == "microglial cell" ~ '8',
cell_type == "midget ganglion cell of retina" ~ '9',
cell_type == "parasol ganglion cell of retina" ~ '10',
cell_type == "retinal bipolar neuron" ~ '11',
cell_type == "retinal cone cell" ~ '12',
cell_type == "retinal ganglion cell" ~ '13',
cell_type == "retinal pigment epithelial cell" ~ '14',
cell_type == "retinal rod cell" ~ '15',
cell_type == "retinal bipolar cell" ~ '16',
cell_type == "starburst amacrine cell" ~ '17'
))
metadata_filtered$cluster <- as.factor(metadata_filtered$cluster)
View(metadata_filtered)
metadata_filtered <- metadata_filtered %>%
mutate(cluster = case_when(
cell_type == "GABAergic amacrine cell"  ~ '0',
cell_type == "H1 horizontal cell"  ~ '1',
cell_type == "H2 horizontal cell"  ~ '2',
cell_type == "Mueller cell"  ~ '3',
cell_type == "S cone cell" ~ '4',
cell_type == "amacrine cell" ~ '5',
cell_type == "astrocyte" ~ '6',
cell_type == "glycinergic amacrine cell" ~ '7',
cell_type == "microglial cell" ~ '8',
cell_type == "midget ganglion cell of retina" ~ '9',
cell_type == "parasol ganglion cell of retina" ~ '10',
cell_type == "retinal bipolar neuron" ~ '11',
cell_type == "retinal cone cell" ~ '12',
cell_type == "retinal ganglion cell" ~ '13',
cell_type == "retinal pigment epithelial cell" ~ '14',
cell_type == "retinal rod cell" ~ '15',
cell_type == "retinal bipolar cell" ~ '16',
cell_type == "starburst amacrine cell" ~ '17',
cell_type == "rod bipolar cell" ~ '18'
))
metadata_filtered$cluster <- as.factor(metadata_filtered$cluster)
View(metadata_filtered)
View(metadata_filtered)
load("~/Documents/PhD_AI/sc_devil/results/res_retina/celltype_data.Rdata")
View(celltype_data)
obj_sccatch <- readRDS("~/Documents/PhD_AI/sc_devil/results/res_retina/obj_sccatch.rds")
load("~/Documents/PhD_AI/sc_devil/results/res_retina/celltype_data.Rdata")
View(celltype_data)
View(celltype_data)
View(celltype_data)
View(celltype_data)
load("~/Documents/PhD_AI/sc_devil/results/res_retina/res_retina.Rdata")
View(res_retina)
load("~/Documents/PhD_AI/sc_devil/results/res_retina/celltype_data.Rdata")
View(celltype_data)
View(celltype_data)
load("~/Documents/PhD_AI/sc_devil/results/res_retina/celltype_data.Rdata")
View(celltype_data)
View(celltype_data)
load("~/Documents/PhD_AI/sc_devil/data/metadata_retina.Rdata")
View(metadata)
load("~/Documents/PhD_AI/sc_devil/results/res_retina/metadata.Rdata")
View(metadata)
View(celltype_data)
load("~/Documents/PhD_AI/sc_devil/results/res_retina/celltype_data.Rdata")
View(celltype_data)
load("~/Documents/PhD_AI/sc_devil/results/res_retina/celltype_data.Rdata")
View(celltype_data)
View(celltype_data)
load("~/Documents/PhD_AI/sc_devil/results/res_retina/res2_retina.Rdata")
View(res2_retina)
