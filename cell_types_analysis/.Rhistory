cluster_pct <- rowSums(cluster_pct > 0) / ncol(cluster_pct)
non_cluster_pct <- counts[, idx_others]
non_cluster_pct <- rowSums(non_cluster_pct > 0) / ncol(non_cluster_pct)
dplyr::tibble(name = names(non_cluster_pct), pct.1 =cluster_pct, pct.2 =non_cluster_pct, cluster = c)
}) %>% do.call('bind_rows', .)
scMayoInput <- lapply(unique(top_genes$cluster), function(c) {
top_genes %>%
dplyr::filter(cluster == c) %>%
dplyr::left_join(percentage_tibble %>% dplyr::filter(cluster == c) %>% dplyr::select(!cluster), by='name') %>%
dplyr::select(name, pval, adj_pval, lfc, pct.1, pct.2) %>%
dplyr::rename(p_val_adj = adj_pval, gene=name, avg_log2FC=lfc)
}) %>% do.call('bind_rows', .)
scMayoMap::scMayoMap(scMayoInput, anno, pct.cutoff = 0)
scMayoInput
??scMayoMap::scMayoMap
scMayoMap::scMayoMap(scMayoInput, anno, pct.cutoff = 0, tissue = tissue)
tissue
anno
scMayoMap::scMayoMap(scMayoInput, scMayoMap::scMayoMapDatabase, pct.cutoff = 0, tissue = tissue)
scObj <- scMayoMap::scMayoMap(scMayoInput, scMayoMap::scMayoMapDatabase, pct.cutoff = 0, tissue = tissue)
scMayoRes <- scMayoMap::scMayoMap(scMayoInput, scMayoMap::scMayoMapDatabase, pct.cutoff = 0, tissue = tissue)
scMayoRes$res
scMayoRes$res %>%
dplyr::left_join(computeGroundTruth(seurat_obj), by='cluster')
scMayoRes$markers
scMayoRes$res
scMayoRes$markers %>%
dplyr::left_join(computeGroundTruth(seurat_obj), by='cluster')
scMayoRes$markers %>%
dplyr::left_join(computeGroundTruth(seurat_obj), by='cluster') %>%
dplyr::mutate(pred = str_replace_all(celltype, " cell", ""))
scMayoRes <- scMayoMap::scMayoMap(scMayoInput, scMayoMap::scMayoMapDatabase, pct.cutoff = 0, tissue = tissue)
scMayoRes$markers %>%
dplyr::left_join(computeGroundTruth(seurat_obj), by='cluster') %>%
dplyr::mutate(pred = str_replace_all(celltype, " cell", ""))
rez <- scMayoRes$markers %>%
dplyr::left_join(computeGroundTruth(seurat_obj), by='cluster') %>%
dplyr::mutate(pred = str_replace_all(celltype, " cell", ""))
rez
rez %>% dplyr::group_by(cluster) %>%
dplyr::filter(score == max(score))
rez %>% dplyr::group_by(cluster) %>%
dplyr::filter(score == max(score)) %>%
dplyr::mutate(true_score = ifelse(pred == celltype, 1, 0))
rez %>%
dplyr::group_by(cluster) %>%
dplyr::filter(score == max(score))
rez %>%
dplyr::group_by(cluster) %>%
dplyr::filter(score == max(score)) %>%
dplyr::mutate(true_score = ifelse(true_cell_type == pred, 1, 0))
scMayoRes <- scMayoMap::scMayoMap(scMayoInput, scMayoMap::scMayoMapDatabase, pct.cutoff = 0, tissue = tissue)
rez <- scMayoRes$markers %>%
dplyr::left_join(computeGroundTruth(seurat_obj), by='cluster') %>%
dplyr::mutate(pred = str_replace_all(celltype, " cell", ""))
rez %>% dplyr::group_by(cluster) %>%
dplyr::filter(score == max(score)) %>%
dplyr::mutate(true_score = ifelse(pred == celltype, 1, 0))
rez %>%
dplyr::group_by(cluster) %>%
dplyr::filter(score == max(score)) %>%
dplyr::mutate(true_score = ifelse(true_cell_type == pred, 1, 0))
scMayoRes <- scMayoMap::scMayoMap(scMayoInput, scMayoMap::scMayoMapDatabase, pct.cutoff = 0, tissue = tissue)
rez <- scMayoRes$markers %>%
dplyr::left_join(computeGroundTruth(seurat_obj), by='cluster') %>%
dplyr::mutate(pred = str_replace_all(celltype, " cell", ""))
rez <- rez %>%
dplyr::group_by(cluster) %>%
dplyr::filter(score == max(score)) %>%
dplyr::mutate(true_score = ifelse(true_cell_type == pred, 1, 0))
rez
acc = sum(rez$true_score) / length(unique(seurat_obj$seurat_clusters))
acc
#setwd("~/GitHub/cell_types_analysis")
rm(list=ls())
pkgs <- c("ggplot2", "dplyr","tidyr","tibble","reshape2", "stringr")
sapply(pkgs, require, character.only = TRUE)
library("AnnotationDbi")
library("org.Hs.eg.db")
library(scMayoMap)
library(Seurat)
source("utils.R")
set.seed(12345)
args = commandArgs(trailingOnly=TRUE)
## Input data
data_path <- args[2]
dataset_name <- args[1]
tissue <- args[3]
dataset_name <- "BaronPancreasData"
tissue <- "pancreas"
if (!(file.exists(paste0("results/", dataset_name)))) {
dir.create(paste0("results/", dataset_name))
}
if (!(file.exists(paste0("plot/", dataset_name)))) {
dir.create(paste0("plot/", dataset_name))
}
seurat_obj <- readRDS(paste0('results/', dataset_name, '/seurat.RDS'))
computeGroundTruth(seurat_obj) %>% dplyr::arrange(cluster)
seurat_obj$cell_type <- cell_type_names_to_scMayo_names(seurat_obj$cell_type, tissue)
computeGroundTruth(seurat_obj) %>% dplyr::arrange(cluster)
counts <- as.matrix(seurat_obj@assays$RNA$counts)
percentage_tibble <- lapply(unique(seurat_obj$seurat_clusters), function(c) {
print(c)
idx_cluster <- which(seurat_obj$seurat_clusters == c)
idx_others <- which(!(seurat_obj$seurat_clusters == c))
if (length(idx_others) > length(idx_cluster)) {
set.seed(007)
idx_others <- sample(idx_others, length(idx_cluster), replace = F)
}
idxs <- c(idx_cluster, idx_others)
cluster_pct <- counts[, idx_cluster]
cluster_pct <- rowSums(cluster_pct > 0) / ncol(cluster_pct)
non_cluster_pct <- counts[, idx_others]
non_cluster_pct <- rowSums(non_cluster_pct > 0) / ncol(non_cluster_pct)
dplyr::tibble(name = names(non_cluster_pct), pct.1 =cluster_pct, pct.2 =non_cluster_pct, cluster = c)
}) %>% do.call('bind_rows', .)
anno <- scMayoMap::scMayoMapDatabase
anno <- lapply(colnames(anno[2:ncol(anno)]), function(ct) {
dplyr::tibble(Type=ct, Marker = anno$gene[anno[,ct] == 1])
}) %>% do.call('bind_rows', .)
anno <- anno %>%
dplyr::filter(grepl(tissue, Type)) %>%
dplyr::mutate(Type = str_replace_all(Type, paste0(tissue, ":"), "")) %>%
dplyr::mutate(Type = str_replace_all(Type, paste0(" cell"), ""))
m <- 'devil'
lfc_cut <- 1
pval_cut <- .05
n_markers <- 10
comparison_tibble <- dplyr::tibble()
lfc_cut <- 1
for (m in c("devil", "nebula", "glmGamPoi")) {
de_res <- de_res_total <- readRDS(paste0('results/', dataset_name, '/', m, '.RDS')) %>% na.omit()
if (sum(grepl("ENSG", de_res$name)) == nrow(de_res)) {
suppressMessages(de_res$name <- mapIds(org.Hs.eg.db, keys=de_res$name,column="SYMBOL", keytype="ENSEMBL", multiVals="first"))
}
for (n_markers in c(3,5,10,20,50,100,200,300)) {
print(n_markers)
for (pval_cut in c(.05, 1e-5, 1e-10, 1e-20, 1e-30, 1e-40, 1e-50)) {
print(pval_cut)
de_res <- de_res_total <- readRDS(paste0('results/', dataset_name, '/', m, '.RDS')) %>% na.omit()
if (sum(grepl("ENSG", de_res$name)) == nrow(de_res)) {
suppressMessages(de_res$name <- mapIds(org.Hs.eg.db, keys=de_res$name,column="SYMBOL", keytype="ENSEMBL", multiVals="first"))
}
cluster_values <- de_res$cluster %>% unique()
remove_genes <- grepl("^ENS", de_res$name)
de_res <- de_res[!remove_genes, ]
top_genes <- de_res %>%
dplyr::group_by(cluster) %>%
dplyr::filter(lfc > lfc_cut, adj_pval <= pval_cut) %>%
dplyr::arrange(-lfc) %>%
dplyr::slice(1:n_markers)
scMayoInput <- lapply(unique(top_genes$cluster), function(c) {
top_genes %>%
dplyr::filter(cluster == c) %>%
dplyr::left_join(percentage_tibble %>% dplyr::filter(cluster == c) %>% dplyr::select(!cluster), by='name') %>%
dplyr::select(name, pval, adj_pval, lfc, pct.1, pct.2) %>%
dplyr::rename(p_val_adj = adj_pval, gene=name, avg_log2FC=lfc)
}) %>% do.call('bind_rows', .)
scMayoRes <- scMayoMap::scMayoMap(scMayoInput, scMayoMap::scMayoMapDatabase, pct.cutoff = 0, tissue = tissue)
rez <- scMayoRes$markers %>%
dplyr::left_join(computeGroundTruth(seurat_obj), by='cluster') %>%
dplyr::mutate(pred = str_replace_all(celltype, " cell", ""))
rez <- rez %>%
dplyr::group_by(cluster) %>%
dplyr::filter(score == max(score)) %>%
dplyr::mutate(true_score = ifelse(true_cell_type == pred, 1, 0))
acc = sum(rez$true_score) / length(unique(seurat_obj$seurat_clusters))
comparison_tibble <- dplyr::bind_rows(
comparison_tibble,
dplyr::tibble(model=m, acc=acc, n_markers=n_markers, pval_cut=pval_cut)
)
}
}
}
comparison_tibble %>%
#dplyr::filter(pval_cut > 1e-10) %>%
dplyr::group_by(model, n_markers) %>%
dplyr::summarise(mean_acc = mean(acc), sd_acc = sd(acc)) %>%
ggplot(mapping = aes(x=n_markers, y=mean_acc, ymin=mean_acc-sd_acc, ymax=mean_acc+sd_acc, col=model)) +
geom_pointrange(position=position_dodge(width=0.1)) +
geom_line(position=position_dodge(width=0.1)) +
theme_bw() +
scale_color_manual(values=method_colors) +
scale_x_continuous(transform = 'log10') +
labs(x = "N markers", y = "Classification accuracy", col="Algorithm", fill="Algorithm")
comparison_tibble %>%
#dplyr::filter(pval_cut <= 1e-10) %>%
# dplyr::group_by(model, n_markers) %>%
# dplyr::summarise(mean_acc = mean(acc), sd_acc = sd(acc)) %>%
ggplot(mapping = aes(x=n_markers, y=acc, col=model)) +
geom_point(position=position_dodge(width=0.1)) +
geom_smooth() +
theme_bw() +
scale_color_manual(values=method_colors) +
scale_x_continuous(transform = 'log10') +
labs(x = "N markers", y = "Classification accuracy", col="Algorithm", fill="Algorithm")
lfc_cut <- 2
for (m in c("devil", "nebula", "glmGamPoi")) {
de_res <- de_res_total <- readRDS(paste0('results/', dataset_name, '/', m, '.RDS')) %>% na.omit()
if (sum(grepl("ENSG", de_res$name)) == nrow(de_res)) {
suppressMessages(de_res$name <- mapIds(org.Hs.eg.db, keys=de_res$name,column="SYMBOL", keytype="ENSEMBL", multiVals="first"))
}
#for (n_markers in c(3,5,10,20,50,100,200,300)) {
for (n_markers in c(5,10,50,100)) {
print(n_markers)
for (pval_cut in c(.05, 1e-5, 1e-20, 1e-50)) {
#for (pval_cut in c(.05, 1e-5, 1e-10, 1e-20, 1e-30, 1e-40, 1e-50)) {
print(pval_cut)
de_res <- de_res_total <- readRDS(paste0('results/', dataset_name, '/', m, '.RDS')) %>% na.omit()
if (sum(grepl("ENSG", de_res$name)) == nrow(de_res)) {
suppressMessages(de_res$name <- mapIds(org.Hs.eg.db, keys=de_res$name,column="SYMBOL", keytype="ENSEMBL", multiVals="first"))
}
cluster_values <- de_res$cluster %>% unique()
remove_genes <- grepl("^ENS", de_res$name)
de_res <- de_res[!remove_genes, ]
top_genes <- de_res %>%
dplyr::group_by(cluster) %>%
dplyr::filter(lfc > lfc_cut, adj_pval <= pval_cut) %>%
dplyr::arrange(-lfc) %>%
dplyr::slice(1:n_markers)
scMayoInput <- lapply(unique(top_genes$cluster), function(c) {
top_genes %>%
dplyr::filter(cluster == c) %>%
dplyr::left_join(percentage_tibble %>% dplyr::filter(cluster == c) %>% dplyr::select(!cluster), by='name') %>%
dplyr::select(name, pval, adj_pval, lfc, pct.1, pct.2) %>%
dplyr::rename(p_val_adj = adj_pval, gene=name, avg_log2FC=lfc)
}) %>% do.call('bind_rows', .)
scMayoRes <- scMayoMap::scMayoMap(scMayoInput, scMayoMap::scMayoMapDatabase, pct.cutoff = 0, tissue = tissue)
rez <- scMayoRes$markers %>%
dplyr::left_join(computeGroundTruth(seurat_obj), by='cluster') %>%
dplyr::mutate(pred = str_replace_all(celltype, " cell", ""))
rez <- rez %>%
dplyr::group_by(cluster) %>%
dplyr::filter(score == max(score)) %>%
dplyr::mutate(true_score = ifelse(true_cell_type == pred, 1, 0))
acc = sum(rez$true_score) / length(unique(seurat_obj$seurat_clusters))
comparison_tibble <- dplyr::bind_rows(
comparison_tibble,
dplyr::tibble(model=m, acc=acc, n_markers=n_markers, pval_cut=pval_cut)
)
}
}
}
comparison_tibble %>%
#dplyr::filter(pval_cut > 1e-10) %>%
dplyr::group_by(model, n_markers) %>%
dplyr::summarise(mean_acc = mean(acc), sd_acc = sd(acc)) %>%
ggplot(mapping = aes(x=n_markers, y=mean_acc, ymin=mean_acc-sd_acc, ymax=mean_acc+sd_acc, col=model)) +
geom_pointrange(position=position_dodge(width=0.1)) +
geom_line(position=position_dodge(width=0.1)) +
theme_bw() +
scale_color_manual(values=method_colors) +
scale_x_continuous(transform = 'log10') +
labs(x = "N markers", y = "Classification accuracy", col="Algorithm", fill="Algorithm")
comparison_tibble %>%
#dplyr::filter(pval_cut <= 1e-10) %>%
# dplyr::group_by(model, n_markers) %>%
# dplyr::summarise(mean_acc = mean(acc), sd_acc = sd(acc)) %>%
ggplot(mapping = aes(x=n_markers, y=acc, col=model)) +
geom_point(position=position_dodge(width=0.1)) +
geom_smooth() +
theme_bw() +
scale_color_manual(values=method_colors) +
scale_x_continuous(transform = 'log10') +
labs(x = "N markers", y = "Classification accuracy", col="Algorithm", fill="Algorithm")
comparison_tibble %>%
#dplyr::filter(pval_cut > 1e-10) %>%
dplyr::group_by(model, n_markers) %>%
dplyr::summarise(mean_acc = mean(acc), sd_acc = sd(acc)) %>%
ggplot(mapping = aes(x=n_markers, y=mean_acc, ymin=mean_acc-sd_acc, ymax=mean_acc+sd_acc, col=model)) +
geom_pointrange(position=position_dodge(width=0.1)) +
geom_line(position=position_dodge(width=0.1)) +
theme_bw() +
scale_color_manual(values=method_colors) +
scale_x_continuous(transform = 'log10') +
labs(x = "N markers", y = "Classification accuracy", col="Algorithm", fill="Algorithm")
comparison_tibble %>%
#dplyr::filter(pval_cut <= 1e-10) %>%
# dplyr::group_by(model, n_markers) %>%
# dplyr::summarise(mean_acc = mean(acc), sd_acc = sd(acc)) %>%
ggplot(mapping = aes(x=n_markers, y=acc, col=model)) +
geom_point(position=position_dodge(width=0.1)) +
geom_smooth() +
theme_bw() +
scale_color_manual(values=method_colors) +
scale_x_continuous(transform = 'log10') +
labs(x = "N markers", y = "Classification accuracy", col="Algorithm", fill="Algorithm")
rm(list=ls())
pkgs <- c("ggplot2", "dplyr","tidyr","tibble","reshape2", "Seurat", "glmGamPoi", "devil", "nebula", 'hrbrthemes')
sapply(pkgs, require, character.only = TRUE)
source("utils.R")
set.seed(12345)
args = commandArgs(trailingOnly=TRUE)
rm(list=ls())
pkgs <- c("ggplot2", "dplyr","tidyr","tibble","reshape2", "Seurat", "glmGamPoi", "devil", "nebula", 'hrbrthemes')
sapply(pkgs, require, character.only = TRUE)
pkgs <- c("ggplot2", "dplyr","tidyr","tibble","reshape2", "Seurat", "glmGamPoi", "devil", "nebula")
sapply(pkgs, require, character.only = TRUE)
source("utils.R")
set.seed(12345)
args = commandArgs(trailingOnly=TRUE)
## Input data
data_path <- args[2]
dataset_name <- args[1]
dataset_name <- 'BaronPancreasData'
if (!(file.exists(paste0("results/", dataset_name)))) {
dir.create(paste0("results/", dataset_name))
}
if (!(file.exists(paste0("plot/", dataset_name)))) {
dir.create(paste0("plot/", dataset_name))
}
input_data <- read_data(dataset_name, data_path)
seurat_obj <- prep_seurat_object(input_data, NPC=20, cluster_res = .2)
umap_plot_seurat <- Seurat::DimPlot(
seurat_obj,
reduction = "umap",
group.by = "seurat_clusters",
label = T,
repel = T) +
theme_minimal() +
theme(legend.position = 'none')
umap_plot_labels <- Seurat::DimPlot(
seurat_obj,
reduction = "umap",
group.by = "cell_type",
label = T,
repel = T) +
theme_minimal() +
theme(legend.position = 'none')
saveRDS(seurat_obj, paste0('results/', dataset_name, '/seurat.RDS'))
time <- readRDS("~/GitHub/devilCaseStudies/cell_types_analysis/results/BaronPancreasData/time.RDS")
View(time)
time <- dplyr::tibble()
m <- 'devil'
s <- Sys.time()
de_res_total <- perform_analysis(seurat_obj, method = m)
rm(list=ls())
pkgs <- c("ggplot2", "dplyr","tidyr","tibble","reshape2", "Seurat", "glmGamPoi", "devil", "nebula")
sapply(pkgs, require, character.only = TRUE)
source("utils.R")
set.seed(SEED)
args = commandArgs(trailingOnly=TRUE)
## Input data
data_path <- args[2]
dataset_name <- args[1]
dataset_name <- 'BaronPancreasData'
if (!(file.exists(paste0("results/", dataset_name)))) {
dir.create(paste0("results/", dataset_name))
}
if (!(file.exists(paste0("plot/", dataset_name)))) {
dir.create(paste0("plot/", dataset_name))
}
input_data <- read_data(dataset_name, data_path)
devtools::install_github("caravagnalab/devil")
rm(list=ls())
pkgs <- c("ggplot2", "dplyr","tidyr","tibble","reshape2", "Seurat", "glmGamPoi", "devil", "nebula")
sapply(pkgs, require, character.only = TRUE)
source("utils.R")
set.seed(SEED)
args = commandArgs(trailingOnly=TRUE)
## Input data
data_path <- args[2]
dataset_name <- args[1]
dataset_name <- 'BaronPancreasData'
if (!(file.exists(paste0("results/", dataset_name)))) {
dir.create(paste0("results/", dataset_name))
}
if (!(file.exists(paste0("plot/", dataset_name)))) {
dir.create(paste0("plot/", dataset_name))
}
input_data <- read_data(dataset_name, data_path)
seurat_obj <- readRDS("results/BaronPancreasData/seurat.RDS")
time <- dplyr::tibble()
m <- 'devil'
s <- Sys.time()
de_res_total <- perform_analysis(seurat_obj, method = m)
umap_plot_seurat
umap_plot_seurat <- Seurat::DimPlot(
seurat_obj,
reduction = "umap",
group.by = "seurat_clusters",
label = T,
repel = T) +
theme_minimal() +
theme(legend.position = 'none')
umap_plot_seurat
perform_analysis <- function(seurat_obj, method = "devil", by="cluster") {
if (!(method %in% c('devil', "glmGamPoi", 'nebula'))) {stop('method not recognized')}
counts <- as.matrix(seurat_obj@assays$RNA$counts)
whole_res <- dplyr::tibble()
if (by == 'cluster') {
for (c in unique(seurat_obj$seurat_clusters)) {
print(c)
idx_cluster <- which(seurat_obj$seurat_clusters == c)
idx_others <- which(!(seurat_obj$seurat_clusters == c))
if (length(idx_others) > length(idx_cluster)) {
set.seed(007)
idx_others <- sample(idx_others, length(idx_cluster), replace = F)
}
idxs <- c(idx_cluster, idx_others)
design_matrix <- model.matrix(~group, dplyr::tibble(group = seurat_obj$seurat_clusters == c))
dm <- design_matrix[idxs,]
cc <- counts[,idxs]
rownames(dm) <- colnames(cc)
sf <- devil:::calculate_sf(cc)
# gg <- ((counts[,seurat_obj$seurat_clusters == c] %>% rowSums()) == 0)
# bad_genes <- gg[gg == T] %>% names()
# counts <- counts[!(rownames(counts) %in% bad_genes),]
clusters <- as.numeric(as.factor(seurat_obj$donor[idxs]))
if (method == 'devil') {
fit <- devil::fit_devil(cc, dm, verbose = T, size_factors = T, parallel.cores = 1, min_cells = -1, avg_counts = -1)
#fit <- devil::fit_devil(cc, dm, verbose = T, size_factors = T, parallel.cores = 1, min_cells = -1, avg_counts = -1)
res <- devil::test_de(fit, contrast = c(0,1), clusters = clusters, max_lfc = Inf) %>% dplyr::mutate(cluster = c)
} else if (method == "glmGamPoi") {
fit <- glmGamPoi::glm_gp(cc, dm, size_factors = "normed_sum", verbose = T)
res <- glmGamPoi::test_de(fit, contrast = c(0,1))
res <- res %>% dplyr::as_tibble() %>% dplyr::select(name, pval, adj_pval, lfc) %>% dplyr::mutate(cluster = c)
} else if (method == "nebula") {
data_g = nebula::group_cell(count=cc,id=clusters,pred=dm)
fit <- nebula::nebula(data_g$count, id = data_g$id, pred = data_g$pred, ncore = 1, mincp = 0, cpc = 0, offset = sf)
res <- dplyr::tibble(
name = fit$summary$gene,
pval = fit$summary$p_groupTRUE,
adj_pval = p.adjust(fit$summary$p_groupTRUE, "BH"),
lfc=fit$summary$logFC_groupTRUE
) %>% dplyr::mutate(cluster = c)
} else {
stop("method not recognized")
}
whole_res <- dplyr::bind_rows(whole_res, res)
}
} else if (by == "cell_type") {
for (c in unique(seurat_obj$cell_type)) {
print(c)
idx_cluster <- which(seurat_obj$cell_type == c)
idx_others <- which(!(seurat_obj$cell_type == c))
if (length(idx_others) > length(idx_cluster)) {
set.seed(SEED)
idx_others <- sample(idx_others, length(idx_cluster), replace = F)
}
idxs <- c(idx_cluster, idx_others)
design_matrix <- model.matrix(~group, dplyr::tibble(group = seurat_obj$cell_type == c))
dm <- design_matrix[idxs,]
cc <- counts[,idxs]
rownames(dm) <- colnames(cc)
sf <- devil:::calculate_sf(cc)
# gg <- ((counts[,seurat_obj$seurat_clusters == c] %>% rowSums()) == 0)
# bad_genes <- gg[gg == T] %>% names()
# counts <- counts[!(rownames(counts) %in% bad_genes),]
clusters <- as.numeric(as.factor(seurat_obj$donor[idxs]))
if (method == 'devil') {
#fit <- devil::fit_devil(cc, dm, verbose = T, size_factors = T, parallel.cores = 1, min_cells = -1, avg_counts = -1)
fit <- devil::fit_devil(cc, dm, verbose = T, size_factors = T, parallel.cores = 4, min_cells = -1, avg_counts = -1)
res <- devil::test_de(fit, contrast = c(0,1), clusters = clusters, max_lfc = Inf) %>% dplyr::mutate(true_cell_type = c)
} else if (method == "glmGamPoi") {
fit <- glmGamPoi::glm_gp(cc, dm, size_factors = "normed_sum", verbose = T)
res <- glmGamPoi::test_de(fit, contrast = c(0,1))
res <- res %>% dplyr::as_tibble() %>% dplyr::select(name, pval, adj_pval, lfc) %>% dplyr::mutate(true_cell_type = c)
} else if (method == "nebula") {
data_g = nebula::group_cell(count=cc,id=clusters,pred=dm)
fit <- nebula::nebula(data_g$count, id = data_g$id, pred = data_g$pred, ncore = 1, mincp = 0, cpc = 0, offset = sf)
res <- dplyr::tibble(
name = fit$summary$gene,
pval = fit$summary$p_groupTRUE,
adj_pval = p.adjust(fit$summary$p_groupTRUE, "BH"),
lfc=fit$summary$logFC_groupTRUE
) %>% dplyr::mutate(true_cell_type = c)
} else {
stop("method not recognized")
}
whole_res <- dplyr::bind_rows(whole_res, res)
}
} else {
stop('by parameter not recognized')
}
whole_res
}
s <- Sys.time()
de_res_total <- perform_analysis(seurat_obj, method = m)
source("utils.R")
s <- Sys.time()
de_res_total <- perform_analysis(seurat_obj, method = m)
if (!(method %in% c('devil', "glmGamPoi", 'nebula'))) {stop('method not recognized')}
method <- 'devil'
counts <- as.matrix(seurat_obj@assays$RNA$counts)
whole_res <- dplyr::tibble()
print(c)
c <- 4
print(c)
idx_cluster <- which(seurat_obj$seurat_clusters == c)
idx_others <- which(!(seurat_obj$seurat_clusters == c))
if (length(idx_others) > length(idx_cluster)) {
set.seed(SEED)
idx_others <- sample(idx_others, length(idx_cluster), replace = F)
}
idxs <- c(idx_cluster, idx_others)
design_matrix <- model.matrix(~group, dplyr::tibble(group = seurat_obj$seurat_clusters == c))
design_matrix
dm <- design_matrix[idxs,]
cc <- counts[,idxs]
rownames(dm) <- colnames(cc)
sf <- devil:::calculate_sf(cc)
sf
min(sf)
max(sf)
# gg <- ((counts[,seurat_obj$seurat_clusters == c] %>% rowSums()) == 0)
# bad_genes <- gg[gg == T] %>% names()
# counts <- counts[!(rownames(counts) %in% bad_genes),]
clusters <- as.numeric(as.factor(seurat_obj$donor[idxs]))
clusters
fit <- devil::fit_devil(cc, dm, verbose = T, size_factors = T, parallel.cores = 1, min_cells = -1, avg_counts = -1)
fit
